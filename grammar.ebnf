//// program : { var_decl | struct_decl | fn_decl } ;
program : fn_decl* ;

var_decl : 'var' ID type '=' expr ;

struct_decl : 'struct' ID '{' ?? '}' ;

fn_decl : 'fn' ['(' param ')'] ID '(' params? ')' type? block ;

params : param {',' param} ;
param : ID type ;

if : 'if' expr block ['else' (block | if)] ;
for : 'for' [[var_decl ';'] expr [';' expr]] block ;
ret : 'return' expr? ;
assign : ID '=' expr ;

statement : var_decl | if | for | ret | 'continue' | 'break' | assign ;

block : '{' statement* '}' ;

expr
  : rel [('and' | 'or') expr]
  | 'not' expr
  ;

rel : add [('==' | '!=' | '>' | '>=' | '<' | '<=' ) add] ;
add : mul [( '+' | '-') add] ;
mul : prim [('*' | '/') mul] ;

prim : '(' expr ')' | access | atom ;

access
////  : ID '.' access
  | ID '(' expr* ')'
////  | ID '[' expr ']'
  | ID
  ;

atom
////  | '[' expr (',' expr)* ']',
////  | 'new' ID '{' (ID '=' expr)* '}'
  : '-' INT
  | INT
//  | BOOL
//  | STR
  ;

type
  : '[' ']' type
  | 'i64'
  | ID
  ;