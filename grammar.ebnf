//// program : ( var_decl | struct_decl | fn_decl )* ;
program : fn_decl* ;

param : ID type
params : param (',' param)* ;

var_decl : 'var' ID type '=' expr ;

struct_decl : 'struct' ID '{' ?? '}' ;

fn_decl : 'fn' ('(' param ')')? ID '(' params? ')' type? block ;

type
  : '[' ']' type
  | 'i64'
  | ID
  ;

block : '{' statement* '}' ;

if : 'if' expr block ('else' (block | if))? ;
for : 'for' ((var_decl ';')? expr (';' expr)?)? block ;
ret : 'return' expr? ;
assign : ID '=' expr ;

statement : var_decl | if | for | ret | 'continue' | 'break' | assign ;

expr
  : rel ('and' | 'or') expr
  | 'not' expr
  | rel
  ;

rel
  : add ('==' | '!=' | '>' | '>=' | '<' | '<=' ) add 
  | add 
  ;

add 
  : mul ( '+' | '-') add 
  | mul 
  ;

mul 
  : prim ('*' | '/') prim 
  | prim 
  ;

prim 
  : '(' expr ')'
  | access 
  | atom 
  ;

access
////  : ID '.' access
  | ID '(' expr* ')'
////  | ID '[' expr ']'
  | ID
  ;

atom
////  | '[' expr (',' expr)* ']',
////  | 'new' ID '{' (ID '=' expr)* '}'
  : '-' INT
  | INT
//  | BOOL
//  | STR
  ;